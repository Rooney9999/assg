name: Deploy to AWS ECS Fargate

on:
  push: 
    branches:
      - main  # Deploys on push to the main branch

jobs:
  deploy:
    name: Deploy to AWS ECS Fargate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd medusa-store
          npm install
      - name: Run tests
        run: |
          cd medusa-store
          npm test
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: 637423204887.dkr.ecr.us-east-1.amazonaws.com  # Update with your actual ECR registry URL
          ECR_REPOSITORY: medusa-ecr  # Update with your ECR repository name
          IMAGE_TAG: ${{ github.sha }}  # Use the short SHA as the image tag
        run: |
          # Build the Docker image using the Dockerfile
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Push the Docker image to Amazon ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Deploy to ECS
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: medusa-cluster  # Update with your ECS cluster name
          SERVICE_NAME: medusa-service  # Update with your ECS service name
          IMAGE_URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        run: |
          # Update ECS service with the new image
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment \
            --region $AWS_REGION